/*8.1. Пояснение к таблице: Процесс 1 в момент времени T1 открывает транзакцию, в 
момент времени T2 производит модификацию данных с 0 на 1. В момент времени 
T4 транзакция закрывается. В параллели процессы 2 и 3 (каждый со своим 
уровнем изоляции транзакций) в момент времени Т3 пытаются прочитать 
данные, которые были подвержены модификации процессом 1

Вопрос, что прочитают процессы 2 и 3 в момент времени T3? */

-- Процесс 2 ничего не прочитает. Т.к. он ожидает commit транзакции, либо ее откат
-- Процесс 3 получит число 1, т.к. он читает uncommited файлы.

/*8.2. Дано: Есть две таблицы: tblT1 (ID, Name), tblT2 (ID, Name). Два процесса 
обращаются к этим таблицам в разные моменты времени и выполняют различные 
операции в транзакции.

Что прочитают процессы 1 и 2 в момент времни Т4? 
	1 процесс прочитает таблицу tblT2 где Id = 1, Name = 'New name2'. 
	2 процесс поймает DeadLock

Выполнится ли команда в момент времени Т5? 
	1 процесс выполнит команду Commit без проблем
	2 процесс выполнить ее не сможет
*/


/* ACID
 1. Atomicity или свойство атамарности. 
	Гарантирует, что ни одна транзакция в БД не будет выполнена частично.
	В случаи ошибки, прерывания транзакции, падения БД. Данные будут восстановлены в первоначальный вид
	
 2.	Consistency или требование согласованности
	Согласованность БД до и после выполнения транзакции
 
 3.	Isolation или требование изолированности транзакции
	Требование изолированности гарантирует, что параллельно выполняемые транзакции не будут мешать друг другу
	
 4. Durabillity или свойство долговечности транзакции
	Долговечность транзакции гарантирует, что БД останется в согласованном состоянии все зависимости от возникших проблем
*/

/* Уровень изоляции транзакции - набор правил, который определяет насколько сильно необходимо защищать данные в транзакции

	READ UNCOMMITTED - не решает ни одную из проблем транзакции
	READ COMMITED - Обеспечивает защиту от грязного чтения
	REPEATABLE READ - Обеспечивает защиту от неповторящегося чтения
	SERIALIZABLE - Обеспечивает защиту от всех проблем транзакции
	
	Проблемы транзакции
		Потерянное обновление - При обновлении поля двумя транзакциями одно из изменений теряется
		Грязное чтение - Чтение данных, полученных в результате действия транзакции, которая после этого откатится.
		Неповторяющееся чтение - возникает, когда в течении одной транзакции при повторном чтении данные оказываются перезаписанными
		Фантомное чтение - при повторном чтении одна и та же выбока дает разные множества строк */
		
-- Создание DeadLock
-- Первая транзакция
BEGIN TRANSACTION
UPDATE dbo.Employees SET TitleOfCourtesy = 'Mrs'
WHERE EmployeeID = 1

UPDATE dbo.Employees SET TitleOfCourtesy = 'Mgs'
WHERE EmployeeID = 2

COMMIT

-- Вторая транзакция
BEGIN TRANSACTION
UPDATE dbo.Employees SET TitleOfCourtesy = 'Mss'
WHERE EmployeeID = 2

UPDATE dbo.Employees SET TitleOfCourtesy = 'Mrs'
WHERE EmployeeID = 1

COMMIT
	